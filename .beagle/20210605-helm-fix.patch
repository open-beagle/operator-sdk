From 4aef1e83cc7bf350f04386d2e3c5e31914e5f756 Mon Sep 17 00:00:00 2001
From: shucheng <shucheng@bd-apaas.com>
Date: Sat, 5 Jun 2021 23:32:23 +0800
Subject: [PATCH] helm fix

---
 internal/helm/controller/reconcile.go | 26 ++++++++++++++++++--------
 internal/helm/internal/types/types.go |  4 ++--
 internal/helm/release/manager.go      |  7 ++++++-
 3 files changed, 26 insertions(+), 11 deletions(-)

diff --git a/internal/helm/controller/reconcile.go b/internal/helm/controller/reconcile.go
index 3917f86d..16d33ef8 100644
--- a/internal/helm/controller/reconcile.go
+++ b/internal/helm/controller/reconcile.go
@@ -16,6 +16,7 @@ package controller
 
 import (
 	"context"
+	"encoding/json"
 	"errors"
 	"fmt"
 	"strconv"
@@ -155,9 +156,9 @@ func (r HelmOperatorReconciler) Reconcile(ctx context.Context, request reconcile
 			return reconcile.Result{}, err
 		}
 
-		if wait && status.DeployedRelease != nil && status.DeployedRelease.Manifest != "" {
+		if wait && status.DeployedRelease != nil && status.DeployedRelease.Config != "" {
 			log.Info("Uninstall wait")
-			isAllResourcesDeleted, err := manager.CleanupRelease(ctx, status.DeployedRelease.Manifest)
+			isAllResourcesDeleted, err := manager.CleanupRelease(ctx, manager.GetDeployedManifest())
 			if err != nil {
 				log.Error(err, "Failed to cleanup release")
 				status.SetCondition(types.HelmAppCondition{
@@ -267,8 +268,8 @@ func (r HelmOperatorReconciler) Reconcile(ctx context.Context, request reconcile
 			Message: message,
 		})
 		status.DeployedRelease = &types.HelmAppRelease{
-			Name:     installedRelease.Name,
-			Manifest: installedRelease.Manifest,
+			Name:   installedRelease.Name,
+			Config: getDeployReleaseConfig(installedRelease),
 		}
 		err = r.updateResourceStatus(ctx, o, status)
 		return reconcile.Result{RequeueAfter: r.ReconcilePeriod}, err
@@ -330,8 +331,8 @@ func (r HelmOperatorReconciler) Reconcile(ctx context.Context, request reconcile
 			Message: message,
 		})
 		status.DeployedRelease = &types.HelmAppRelease{
-			Name:     upgradedRelease.Name,
-			Manifest: upgradedRelease.Manifest,
+			Name:   upgradedRelease.Name,
+			Config: getDeployReleaseConfig(upgradedRelease),
 		}
 		err = r.updateResourceStatus(ctx, o, status)
 		return reconcile.Result{RequeueAfter: r.ReconcilePeriod}, err
@@ -384,8 +385,8 @@ func (r HelmOperatorReconciler) Reconcile(ctx context.Context, request reconcile
 		Message: message,
 	})
 	status.DeployedRelease = &types.HelmAppRelease{
-		Name:     expectedRelease.Name,
-		Manifest: expectedRelease.Manifest,
+		Name:   expectedRelease.Name,
+		Config: getDeployReleaseConfig(expectedRelease),
 	}
 	err = r.updateResourceStatus(ctx, o, status)
 	return reconcile.Result{RequeueAfter: r.ReconcilePeriod}, err
@@ -437,3 +438,12 @@ func (r HelmOperatorReconciler) waitForDeletion(ctx context.Context, o client.Ob
 		return false, nil
 	}, tctx.Done())
 }
+
+func getDeployReleaseConfig(deployedRelease *rpb.Release) string {
+	a, err := json.Marshal(deployedRelease.Config)
+	if err != nil {
+		return ""
+	}
+
+	return string(a)
+}
diff --git a/internal/helm/internal/types/types.go b/internal/helm/internal/types/types.go
index b816b57b..506ea6c6 100644
--- a/internal/helm/internal/types/types.go
+++ b/internal/helm/internal/types/types.go
@@ -51,8 +51,8 @@ type HelmAppCondition struct {
 }
 
 type HelmAppRelease struct {
-	Name     string `json:"name,omitempty"`
-	Manifest string `json:"manifest,omitempty"`
+	Name   string `json:"name,omitempty"`
+	Config string `json:"config,omitempty"`
 }
 
 const (
diff --git a/internal/helm/release/manager.go b/internal/helm/release/manager.go
index 9489d377..da36b92f 100644
--- a/internal/helm/release/manager.go
+++ b/internal/helm/release/manager.go
@@ -58,6 +58,7 @@ type Manager interface {
 	ReconcileRelease(context.Context) (*rpb.Release, error)
 	UninstallRelease(context.Context, ...UninstallOption) (*rpb.Release, error)
 	CleanupRelease(context.Context, string) (bool, error)
+	GetDeployedManifest() string
 }
 
 type manager struct {
@@ -143,7 +144,7 @@ func (m manager) isUpgrade(deployedRelease *rpb.Release) bool {
 	// Judging whether to skip updates
 	skip := m.namespace == deployedRelease.Namespace
 	skip = skip && m.releaseName == deployedRelease.Name
-	skip = skip && apiequality.Semantic.DeepEqual(m.chart, deployedRelease.Chart)
+	skip = skip && m.chart.AppVersion() == deployedRelease.Chart.AppVersion()
 	skip = skip && apiequality.Semantic.DeepEqual(m.values, deployedRelease.Config)
 
 	return !skip
@@ -414,3 +415,7 @@ func (m manager) CleanupRelease(ctx context.Context, manifest string) (bool, err
 	}
 	return true, nil
 }
+
+func (m manager) GetDeployedManifest() string {
+	return m.deployedRelease.Manifest
+}
-- 
2.25.1

